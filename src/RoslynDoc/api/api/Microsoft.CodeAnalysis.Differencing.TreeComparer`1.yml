items:
- uid: Microsoft.CodeAnalysis.Differencing.TreeComparer`1
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yml
  name: TreeComparer<TNode>
  fullName: Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>
  type: Class
  source:
    remote: &o0
      branch: master
      repo: https://github.com/pengbian/roslyn.git
      description: 2b5d9bbb
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 21
  summary: Implements a tree differencing algorithm.
  syntax:
    content:
      CSharp: public abstract class TreeComparer<TNode>
  inheritance:
  - id: System.Object
    name: object
    isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1
  children:
  - Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeEditScript(`0,`0)
  - Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeMatch(`0,`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}})
  - Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDistance(`0,`0)
  - Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ValuesEqual(`0,`0)
- uid: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeEditScript(`0,`0)
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yml
  name: ComputeEditScript(TNode, TNode)
  fullName: Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.ComputeEditScript(TNode, TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 30
  summary: Returns an edit script that transforms  to .
  syntax:
    content:
      CSharp: public EditScript<TNode> ComputeEditScript(TNode oldRoot, TNode newRoot)
    parameters:
    - id: oldRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: EditScript
      type:
        id: Microsoft.CodeAnalysis.Differencing.EditScript{`0}
        name: EditScript
        href: Microsoft.CodeAnalysis.Differencing.EditScript{`0}
  id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeEditScript(`0,`0)
- uid: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeMatch(`0,`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}})
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yml
  name: ComputeMatch(TNode, TNode, IEnumerable<KeyValuePair<TNode, TNode>>)
  fullName: Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.ComputeMatch(TNode, TNode, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TNode, TNode>>)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 38
  summary: Returns a match map of  descendants to  descendants.
  syntax:
    content:
      CSharp: public Match<TNode> ComputeMatch(TNode oldRoot, TNode newRoot, IEnumerable<KeyValuePair<TNode, TNode>> knownMatches = null)
    parameters:
    - id: oldRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newRoot
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: knownMatches
      type:
        id: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}}
        name: IEnumerable<KeyValuePair<TNode, TNode>>
        isExternal: true
    return:
      id: Match
      type:
        id: Microsoft.CodeAnalysis.Differencing.Match{`0}
        name: Match
        href: Microsoft.CodeAnalysis.Differencing.Match{`0}
  id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ComputeMatch(`0,`0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`0}})
- uid: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDistance(`0,`0)
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yml
  name: GetDistance(TNode, TNode)
  fullName: Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.GetDistance(TNode, TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 52
  summary: Calculates the distance [0..1] of two nodes.
  syntax:
    content:
      CSharp: public abstract double GetDistance(TNode oldNode, TNode newNode);
    parameters:
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Double
      type:
        id: System.Double
        name: double
        href: System.Double
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.GetDistance(`0,`0)
- uid: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ValuesEqual(`0,`0)
  href: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.yml
  name: ValuesEqual(TNode, TNode)
  fullName: Microsoft.CodeAnalysis.Differencing.TreeComparer<TNode>.ValuesEqual(TNode, TNode)
  type: Method
  source:
    remote: *o0
    path: src/Workspaces/Core/Portable/Differencing/TreeComparer.cs
    startLine: 61
  summary: Returns true if the specified nodes have equal values.
  syntax:
    content:
      CSharp: public abstract bool ValuesEqual(TNode oldNode, TNode newNode);
    parameters:
    - id: oldNode
      type:
        id: TNode
        name: TNode
        href: TNode
    - id: newNode
      type:
        id: TNode
        name: TNode
        href: TNode
    return:
      id: Boolean
      type:
        id: System.Boolean
        name: bool
        href: System.Boolean
        isExternal: true
  id: Microsoft.CodeAnalysis.Differencing.TreeComparer`1.ValuesEqual(`0,`0)
